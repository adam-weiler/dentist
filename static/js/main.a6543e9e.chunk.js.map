{"version":3,"sources":["pages/Home.js","pages/Contact.js","pages/Procedure.js","pages/Procedures.js","App.js","serviceWorker.js","index.js"],"names":["Home","Contact","props","phone_number","Procedure","this","match","params","id","Component","to","App","className","path","render","Procedures","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAWeA,EATF,WACT,OACI,oCACI,8CACA,+DCKGC,EATC,SAACC,GACb,OACI,oCACI,uCACA,2BAAKA,EAAMC,gB,wCCORC,E,iLATP,OACI,oCACI,oDAA2BC,KAAKH,MAAMI,MAAMC,OAAOC,IACnD,0C,GALQC,aC4BTL,EA3BG,WAad,OACI,oCACI,0CACA,qEAEA,4BACI,4BAAI,kBAAC,IAAD,CAAMM,GAAG,iBAAT,oBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,mBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,qBCqCLC,MAlDf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OAEb,6BAOE,kBAAC,IAAD,CAAMF,GAAG,KAAT,QAPF,eASE,kBAAC,IAAD,CAAMA,GAAG,eAAT,cACC,IACD,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAGF,kBAAC,IAAD,KAKE,kBAAC,IAAD,CAAOG,KAAK,kBAAkBC,OAAS,SAACZ,GAAD,OACrC,kBAAC,EAAcA,MANnB,QAUE,kBAAC,IAAD,CAAOW,KAAK,cAAcC,OAAS,SAACZ,GAAD,OACjC,kBAACa,EAAeb,MAIlB,kBAAC,IAAD,CAAOW,KAAK,WAAWC,OAAS,SAACZ,GAAD,OAC9B,kBAAC,EAAD,eAASC,aAAa,kBAAqBD,OAG7C,kBAAC,IAAD,CAAOW,KAAK,IAAIG,UAAWhB,QCrCjBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2DCZNe,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a6543e9e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => {\n    return(\n        <>\n            <h1>Dentist Office</h1>\n            <p>Welcome to the Dentist office!</p>\n        </>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Contact = (props) => {\n    return(\n        <>\n            <h1>Contact</h1>\n            <p>{ props.phone_number }</p>\n        </>\n    )\n}\n\nexport default Contact;","import React, { Component } from 'react';\n\nclass Procedure extends Component {\n    render() {\n        return(\n            <>\n                <h1>A Specific Procedure { this.props.match.params.id }</h1>\n                <p>......</p>\n            </>\n        );\n    }\n}\n\nexport default Procedure;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Procedure = () => {\n\n    // state = {\n    //     title: '...',\n    //     description: '...'\n    // }\n\n    // // Pretend there is an API here:\n    // componentDidMount() {\n    //     console.log(`Fetching this.props.match.params.id`)\n    // console.log(this.props.match.params.id);\n    // }\n\n    return(\n        <>\n            <h1>Procedures</h1>\n            <p>Check out all these Dental procedures:</p>\n\n            <ul>\n                <li><Link to='/procedures/1'>Teeth Cleaning!</Link></li>\n                <li><Link to='/procedures/2'>Cavity Filling</Link></li>\n                <li><Link to='/procedures/3'>Teeth Canals!</Link></li>\n            </ul>\n        </>\n    )\n}\n\nexport default Procedure;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Contact from './pages/Contact';\nimport Procedure from './pages/Procedure.js';\nimport Procedures from './pages/Procedures';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n\n        <nav>\n          {/*\n            The three different types of whitespace are:\n            &nbsp;\n            {' '} \n            Import react-add-space and use it there. :(\n           */}\n          <Link to='/'>Home</Link>   {/* This is like an a href */}\n          &nbsp;  {/* Fred prefers this method. */}\n          <Link to='/procedures'>Procedures</Link>\n          {' '}\n          <Link to='/contact'>Contact</Link>\n        </nav>\n\n        <Switch>\n        {/* <Route exact path='/' component={Home} /> */}\n          \n          {/* <Route path='/procedures/:id' component={Procedure} />  */}{/* This goes first. */}\n          \n          <Route path='/procedures/:id' render={ (props) =>\n            <Procedure {...props} />\n          } />\n\n          {/* <Route path='/procedures' component={Procedures} /> */}     {/* This goes second. */}\n          <Route path='/procedures' render={ (props) => \n            <Procedures {...props} />\n          } />\n\n          {/* <Route path='/contact' component={Contact} /> */}\n          <Route path='/contact' render={ (props) => \n            <Contact phone_number='1-800-MY-TEETH' {...props} />\n          } />\n          \n          <Route path='/' component={Home} />\n  {/* \n          <Home />\n          <Contact/>\n          <Procedures/> */}\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}